#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('NodeChatroom:server');
var http = require('http');
var mongo = require ('mongodb').MongoClient;

/**
 * Get port from environment and store in Express.
 */

var port = process.env.PORT || 3000;
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port,function(){
  console.log('Express server listening on port ' + port);
});

//var mongoURI = 'mongodb://localhost/chatroom';

io.on('connection', function(socket) {
  console.log('a user connected');

  mongo.connect(process.env.CUSTOMCONNSTR_Env_MongoDB_URI, function(err, db){
    if(err){
      console.warn(err.message);
    } else{
      var collection = db.collection('chat messages');
      var stream = collection.find().sort().limit(10).stream();
      stream.on('data', function(chat){
        console.log('emitting chat');
        socket.emit('chat', chat.content);
      });
    }
  });

  socket.on('disconnect', function(){
    console.log('user disconnected');
  });

  socket.on ('chat', function (msg){
    mongo.connect(process.env.CUSTOMCONNSTR_Env_MongoDB_URI, function(err,db){
      if(err){
        console.warn(err.message);
      } else{
        var collection = db.collection('chat messages');
        collection.insert({content : msg}, function (err,o){
          if (err) {console.warn(err.message);}
          else {console.log('chat message inserted into db: ' + msg);}
        });
      }
  });

    socket.broadcast.emit('chat',msg);
    });

});


//server.on('error', onError);
//server.on('listening', onListening);

